#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Author: Seth Brown
Date: 17 Dec 2012
Description: Weather forecast
"""
import sys
import textwrap
import json
import urllib2

def weather(dat, day_idx, metric=False):
    """Assemble weather data
    """
    data = dat['forecast']['txt_forecast']['forecastday'][day_idx]
    day = data['title']
    forecast = data['fcttext_metric'] if metric else data['fcttext']
    temps = dat['forecast']['simpleforecast']['forecastday'][day_idx]
    high = temps['high']['celsius'] if metric else temps['high']['fahrenheit']
    low = temps['low']['celsius'] if metric else temps['low']['fahrenheit']

    return day, forecast, high, low


def cli_format(d, metric=False, wrap=60):
    """Format weather data
    """
    forecast = '\n'.join(textwrap.wrap(d[1], wrap))
    temp = '{loc}\n{delim}\n\nHigh {high}{deg}, Low {low}{deg}\n\n{forecast}\n'
    out = temp.format(loc=d[0], 
                      forecast=forecast, 
                      high=d[2], 
                      low=d[3], 
                      delim=wrap*'=',
                      deg='°C' if metric else '°F')
    return out


def main():
    """Output weather data
    """
    wunder_data = {'base_url': 'http://api.wunderground.com/api/',
                   'key': sys.argv[1],
                   'query': '/conditions/forecast/q/',
                   'zip': sys.argv[2]}
    try:
        metric = True if sys.argv[3] == '-c' else False
    except IndexError:
        metric = False
    url = '{base_url}{key}{query}{zip}.json'.format(**wunder_data)
    r = json.load(urllib2.urlopen(url))
    location = r['current_observation']['display_location']['full']
    print '\n{0}\n'.format(location)
    times = (0, 1, 2)
    for time in times:
        weather_data = weather(r, time, metric)
        cli_output = cli_format(weather_data, metric, 40)
        print cli_output

if __name__ == '__main__':
    main()
